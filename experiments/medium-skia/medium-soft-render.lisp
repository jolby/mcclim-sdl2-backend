(in-package #:mcclim-sdl2)

(defun update-surface (mirror pattern dirty-region)
  (declare (ignore dirty-region))
  (let* ((window (sdl2-window (window-id mirror)))
         (surface (sdl2:get-window-surface window))
         (width (sdl2:surface-width surface))
         (height (sdl2:surface-height surface)))
    (assert (and (>= (pattern-width pattern) width)
                 (>= (pattern-height pattern) height)))
    (sdl2-ffi.functions:sdl-lock-surface surface)
    (let ((array (pattern-array pattern))
          (pointer (plus-c:c-ref surface sdl2-ffi:sdl-surface :pixels))
          (array-type `(:array :uint32 ,height ,width)))
      (log:info "updating the surface ~s ~s ~s" width height (type-of array))
      (cffi:lisp-array-to-foreign array pointer array-type))
    (sdl2-ffi.functions:sdl-unlock-surface surface)))

(defun %mirror-force-output (mirror)
  ;; (declare (optimize speed))
  (log:info "finalizing output")
  (unless (region-equal (mcclim-render:image-dirty-region mirror) +nowhere+)
    (mcclim-render:with-image-locked (mirror)
      (log:info "foo ~a <- ~a" mirror (mcclim-render:image-mirror-image mirror))
      (let* ((dirty (mcclim-render:image-dirty-region mirror))
             (image (mcclim-render:image-mirror-image mirror)))
        (unless (region-equal dirty +nowhere+)
          (setf (mcclim-render:image-dirty-region mirror) +nowhere+)
          (update-surface mirror image dirty))))))

(defclass sdl2-soft-medium (mcclim-render::render-medium-mixin basic-medium)
  ())

(defmethod make-medium ((port sdl2-port) sheet)
  (make-instance 'sdl2-soft-medium :port port :sheet sheet))

(defmethod medium-finish-output :before ((medium sdl2-soft-medium))
  (alx:when-let ((mirror (medium-drawable medium)))
    (%mirror-force-output mirror)))

(defmethod medium-force-output :before ((medium sdl2-soft-medium))
  (alx:when-let ((mirror (medium-drawable medium)))
    (%mirror-force-output mirror)))
